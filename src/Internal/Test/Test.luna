import Std.Test

import Dataframes.Array
import Dataframes.Column
import Dataframes.Types

def assert msg act:
    result = runError act
    case result of
        Left e: print ("[FAILURE] " + msg + ": " + e)
        Right v: print ("[SUCCESS] " + msg + ": " + v.toText)
    None
def require pred msg:
    if pred then msg else throw msg
def assertEqual msg a b:
    assert msg (require (a == b) (a.toText + " == " + b.toText))
def assertGE msg a b:
    assert msg (require (a >= b) (a.toText + " >= " + b.toText))
def assertThrow msg action:
    result = runError action
    print case result of
        Left e: "[SUCCESS] " + msg + ": threw " + e
        Right v: "[FAILURE] " + msg + ": no throw: " + v.toText

class TestArrayBuilder:
    def testDoubleBuilder:
        print "=== Testing for Double ==="
        builder = createBuilder DoubleType
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "double"
        assertEqual "type as text" type.toText "double"
        builder.append 7.0
        builder.appendMany (1 . upto 3 . each .toReal)
        assertGE "builder.capacity" builder.capacity 4
        assertEqual "builder.length" builder.length 4
        builtArray = builder.finish
        assertThrow ("invalid index -1 throws") (builtArray.valueAt -1)
        assertThrow ("invalid index 6 throws") (builtArray.valueAt 6)
        assertEqual "built single elem array" builtArray.toList [7.0, 1.0, 2.0, 3.0]
    def testInt64Builder:
        print "=== Testing for Int ==="
        builder = createBuilder Int64Type
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "int64"
        assertEqual "type as text" type.toText "int64"
        builder.append 7
        builder.appendMany (1 . upto 5)
        assertGE "builder.capacity" builder.capacity 6
        assertEqual "builder.length" builder.length 6
        builtArray = builder.finish
        assertThrow ("invalid index -1 throws") (builtArray.valueAt -1)
        assertThrow ("invalid index 6 throws") (builtArray.valueAt 6)
        assertEqual "built single elem array" builtArray.toList [7, 1, 2, 3, 4, 5]
        assertEqual "map to the same type" (builtArray.mapSame (+10) . toList) [17, 11, 12, 13, 14, 15]
        def someFunction num: if num > 3 then Nothing else Just ("foo " + num.toText)
        assertEqual "map that changes type" (builtArray.map MaybeStringType someFunction . toList) [Nothing, Just "foo 1", Just "foo 2", Just "foo 3", Nothing, Nothing]

    def testMaybeInt64Builder:
        print "=== Testing for (Maybe Int) ==="
        builder = createBuilder MaybeInt64Type
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "int64"
        assertEqual "type as text" type.toText "int64"
        builder.append (Just 7)
        builder.append (Nothing)
        builder.appendMany (1 . upto 3 . each (Just))
        assertGE "builder.capacity" builder.capacity 5
        assertEqual "builder.length" builder.length 5
        builtArray = builder.finish
        assert "not null at 0" (builtArray.nullAt 0 . not)
        assert "null at 1" (builtArray.nullAt 1)
        assertThrow "null at -1 throws" (builtArray.nullAt -1)
        assertEqual "value at 0" (builtArray.valueAt 0) (Just 7)
        assertEqual "value at 1" (builtArray.valueAt 1) Nothing
        assertEqual "built single elem array" builtArray.toList [Just 7, Nothing, Just 1, Just 2, Just 3]
        assertEqual "map to the same type" (builtArray.mapSame (_.map (+10)) . toList) [Just 17, Nothing, Just 11, Just 12, Just 13]

    # TODO: properly handle `assertEqual "type width" type.bitWidth 64`
    def testMaybeStringBuilder:
        print "=== Testing for (Maybe Text) ==="
        builder = createBuilder MaybeStringType
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertThrow "type width throws (not fixed width type)" type.bitWidth
        assertEqual "type name" type.name "utf8"
        assertEqual "type as text" type.toText "string"
        builder.append (Just "first")
        builder.append (Nothing)
        nums = (1 . upto 3) . each (Just _.toText)
        print ("nums: " + nums.toText)
        builder.appendMany (nums)
        assertGE "builder.capacity" builder.capacity 5
        assertEqual "builder.length" builder.length 5
        builtArray = builder.finish
        assert "not null at 0" (builtArray.nullAt 0 . not)
        assert "null at 1" (builtArray.nullAt 1)
        assertEqual "value at 0" (builtArray.valueAt 0) (Just "first")
        assertEqual "value at 1" (builtArray.valueAt 1) Nothing
        assertEqual "built single elem array" builtArray.toList [Just "first", Nothing, Just "1", Just "2", Just "3"]
        print "================================="
        print (builtArray.mapSame elem:
            case elem of 
                Just val: Just (val + "-suffix")
                Nothing: Nothing)

    def testRoundTrip msg typeTag list:
        arr = listToArray typeTag list
        assertEqual "array and list length same" arr.length list.length
        assertEqual msg (arr . toList) list

    def testListArrayRoundTrip:
        self.testRoundTrip "Double64 round trip" DoubleType [10.25, -5.825,  5000000000.0]
        self.testRoundTrip "Maybe Double64 round trip" MaybeDoubleType [Just 10.25, Just -5.825, Just 5000000000.0, Nothing]
        self.testRoundTrip "Int32 round trip" Int32Type [10, -5,  1000000000]
        self.testRoundTrip "Maybe Int32 round trip"MaybeInt32Type [Just 10, Just -5, Just 1000000000, Nothing]
        self.testRoundTrip "Int64 round trip" Int64Type [10, -5,  5000000000]
        self.testRoundTrip "Maybe Int64 round trip"MaybeInt64Type [Just 10, Just -5, Just 5000000000, Nothing]
        self.testRoundTrip "Text round trip" StringType ["ten", "-5", "legion"]
        self.testRoundTrip "Maybe Text round trip" MaybeStringType [Just "ten", Just "-5", Just "legion", Nothing]

    def testSlicing:
        arr = listToArray Int32Type [1, 2, 3, 4, 5]
        arr2 = arr.slice 1 3
        assertEqual "slice result" arr2.toList [2, 3, 4]
        buf1Ptr = arr.data.bufferAt 1 . data
        buf2Ptr = arr2.data.bufferAt 1 . data
        assert "ptr equal" (buf1Ptr.ptr == buf2Ptr.ptr)
        assertEqual "sliced data has proper offset" arr2.data.offset (arr.data.offset+1)

    def testChunkedArray:
        arr = listToArray Int32Type [1, 2, 3, 4, 5]
        charr = createChunkedArrayFromChunk arr
        assertEqual "chunked array type" charr.type.name "int32"
        assertEqual "single chunk" charr.chunkCount 1
        assertEqual "length" charr.length 5

        arr2 = listToArray Int32Type [10, 20, 30]
        charr2 = createChunkedArrayFromChunks [arr, arr2]
        assertEqual "chunked array type" charr2.type.name "int32"
        assertEqual "single chunk" charr2.chunkCount 2
        assertEqual "length" charr2.length 8
        assertEqual "null count" charr2.nullCount 0
        assertEqual "second chunk" (charr2.chunkAt 1 . toList) [10, 20, 30]
        assertEqual "as list" charr2.toList [1, 2, 3, 4, 5, 10, 20, 30]

    def testDatatype:
        typeInt32 = createDatatype Int32Type
        assertEqual "name" typeInt32.name "int32"
        assertEqual "bitWidth" typeInt32.bitWidth 32

        typeInt64 = createDatatype Int64Type
        assertEqual "name" typeInt64.name "int64"
        assertEqual "bitWidth" typeInt64.bitWidth 64
        
        typeDouble = createDatatype DoubleType
        assertEqual "name" typeDouble.name "double"
        assertEqual "bitWidth" typeDouble.bitWidth 64
        
        typeString = createDatatype StringType
        assertEqual "name" typeString.name "utf8"
        assertThrow "bitWidth" typeString.bitWidth

    def testField:
        fieldInt64 = createField "x" Int64Type
        assertEqual "name" fieldInt64.name "x"
        assertEqual "type.name" fieldInt64.type.name "int64"
        assertEqual "nullable" fieldInt64.nullable False

        fieldMaybeString = createField "handle_name" MaybeStringType
        assertEqual "name" fieldMaybeString.name "handle_name"
        assertEqual "type.name" fieldMaybeString.type.name "utf8"
        assertEqual "nullable" fieldMaybeString.nullable True

    def testColumn:
        col = Column.fromList "good numbers" Int64Type [1,2,3]
        assertEqual "length" col.length 3
        assertEqual "name" col.name "good numbers"
        isIntCol = case col of
            ColumnInt _: True
            _: False
        assert "matched ColumnInt" isIntCol
        intCol = case col of
            ColumnInt tc: tc
        assertEqual "intCol.toList" intCol.toList [1,2,3]

        colMapped = col.map StringType "good strings" (num: (num.toText + " hallo!"))


    def run:
        self.testColumn
        self.testField
        throw "stop"
        self.testDatatype
        self.testChunkedArray
        self.testSlicing
        self.testDoubleBuilder
        self.testListArrayRoundTrip
        self.testMaybeStringBuilder
        self.testInt64Builder
        self.testMaybeInt64Builder
