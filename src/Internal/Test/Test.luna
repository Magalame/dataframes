import Std.Test

import Dataframes.Array
import Dataframes.Types

def assert msg act:
    result = runError act
    case result of
        Left e: print ("[FAILURE] " + msg + ": " + e)
        Right v: print ("[SUCCESS] " + msg + ": " + v.toText)
    None
def require pred msg:
    if pred then msg else throw msg
def assertEqual msg a b:
    assert msg (require (a == b) (a.toText + " == " + b.toText))
def assertGE msg a b:
    assert msg (require (a >= b) (a.toText + " >= " + b.toText))
def assertThrow msg action:
    result = runError action
    print case result of
        Left e: "[SUCCESS] " + msg + ": threw " + e
        Right v: "[FAILURE] " + msg + ": no throw: " + v.toText

class TestArrayBuilder:
    def testInt64Builder:
        print "=== Testing for Int ==="
        builder = createBuilder Int64TypeHelper
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "int64"
        assertEqual "type as text" type.toText "int64"
        builder.append 7
        builder.appendMany (1 . upto 5)
        assertGE "builder.capacity" builder.capacity 6
        assertEqual "builder.length" builder.length 6
        builtArray = builder.finish
        assertThrow ("invalid index -1 throws") (builtArray.valueAt -1)
        assertThrow ("invalid index 6 throws") (builtArray.valueAt 6)
        assertEqual "built single elem array" builtArray.toList [7, 1, 2, 3, 4, 5]
        assertEqual "built single elem array" (builtArray.map (+10) . toList) [17, 11, 12, 13, 14, 15]
    def testMaybeInt64Builder:
        print "=== Testing for (Maybe Int) ==="
        builder = createBuilder MaybeInt64TypeHelper
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "int64"
        assertEqual "type as text" type.toText "int64"
        builder.append (Just 7)
        builder.append (Nothing)
        builder.appendMany (1 . upto 3 . each (Just))
        assertGE "builder.capacity" builder.capacity 5
        assertEqual "builder.length" builder.length 5
        builtArray = builder.finish
        assert "not null at 0" (builtArray.nullAt 0 . not)
        assert "null at 1" (builtArray.nullAt 1)
        assertThrow "null at -1 throws" (builtArray.nullAt -1)
        assertEqual "value at 0" (builtArray.valueAt 0) (Just 7)
        assertEqual "value at 1" (builtArray.valueAt 1) Nothing
        assertEqual "built single elem array" builtArray.toList [Just 7, Nothing, Just 1, Just 2, Just 3]
        assertEqual "built single elem array" (builtArray.map (_.map (+10)) . toList) [Just 17, Nothing, Just 11, Just 12, Just 13]

    # TODO: properly handle `assertEqual "type width" type.bitWidth 64`
    def testMaybeStringBuilder:
        print "=== Testing for (Maybe Text) ==="
        builder = createBuilder MaybeStringTypeHelper
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertThrow "type width throws (not fixed width type)" type.bitWidth
        assertEqual "type name" type.name "utf8"
        assertEqual "type as text" type.toText "string"
        builder.append (Just "first")
        builder.append (Nothing)
        nums = (1 . upto 3) . each (Just _.toText)
        print ("nums: " + nums.toText)
        builder.appendMany (nums)
        assertGE "builder.capacity" builder.capacity 5
        assertEqual "builder.length" builder.length 5
        builtArray = builder.finish
        assert "not null at 0" (builtArray.nullAt 0 . not)
        assert "null at 1" (builtArray.nullAt 1)
        assertEqual "value at 0" (builtArray.valueAt 0) (Just "first")
        assertEqual "value at 1" (builtArray.valueAt 1) Nothing
        assertEqual "built single elem array" builtArray.toList [Just "first", Nothing, Just "1", Just "2", Just "3"]
        print "================================="
        print (builtArray.map elem:
            case elem of 
                Just val: Just (val + "-suffix")
                Nothing: Nothing)

    def testRoundTrip msg typeTag list:
        arr = listToArray typeTag list
        assertEqual "array and list length same" arr.length list.length
        assertEqual msg (arr . toList) list

    def testListArrayRoundTrip:
        self.testRoundTrip "Double64 round trip" DoubleTypeHelper [10.25, -5.825,  5000000000.0]
        self.testRoundTrip "Maybe Double64 round trip" MaybeDoubleTypeHelper [Just 10.25, Just -5.825, Just 5000000000.0, Nothing]
        self.testRoundTrip "Int32 round trip" Int32TypeHelper [10, -5,  1000000000]
        self.testRoundTrip "Maybe Int32 round trip"MaybeInt32TypeHelper [Just 10, Just -5, Just 1000000000, Nothing]
        self.testRoundTrip "Int64 round trip" Int64TypeHelper [10, -5,  5000000000]
        self.testRoundTrip "Maybe Int64 round trip"MaybeInt64TypeHelper [Just 10, Just -5, Just 5000000000, Nothing]
        self.testRoundTrip "Text round trip" StringTypeHelper ["ten", "-5", "legion"]
        self.testRoundTrip "Maybe Text round trip" MaybeStringTypeHelper [Just "ten", Just "-5", Just "legion", Nothing]

    def run:
        self.testListArrayRoundTrip
        self.testMaybeStringBuilder
        self.testInt64Builder
        self.testMaybeInt64Builder
