import Dataframes.Array
import Dataframes.ChunkedArray
import Dataframes.Field
import Dataframes.Schema
import Dataframes.Table
import Dataframes.Types

import Dataframes.Internal.CWrappers
import Dataframes.Internal.Utils

class TypedColumn a:
    TypedColumn a
    TypedColumnVal a ColumnWrapper

    def typeTag: case self of
        TypedColumn t: t
        TypedColumnVal t _: t

    def ptr: case self of
        TypedColumnVal _ ptr: ptr

    def fromWrapper wrapper:
        wrapper' = wrapper
        TypedColumnVal self.typeTag wrapper'

    def fromChunks field chunks:
        self.fromWrapper $ createColumnWrapper field.ptr chunks.ptr

    def nullCount: self.ptr.nullCount
    def countMissing: self.nullCount
    def length: self.ptr.length
    def field:
        Field.fromWrapper $ self.ptr.field
    def type:
        ptr = self.ptr.type
        DataTypeVal ptr
    def data:
        ptr = self.ptr.data
        ChunkedArrayVal self.typeTag ptr
    def name: self.ptr.name
    def rename n:
        f = self.field.rename n
        chunks = self.data
        self.fromChunks f chunks
    def slice fromIndex length:
        self.fromWrapper $ self.ptr.slice fromIndex length
    def toList:
        self.data.toList

    def map typeTag newName f:
        newChunkedArray = self.data.map typeTag f
        field = Field.fromTypeTag newName typeTag
        TypedColumn typeTag . fromChunks field newChunkedArray

class Column:
    Column
    ColumnInt       (TypedColumn Int64Type      )
    ColumnMaybeInt  (TypedColumn MaybeInt64Type )
    ColumnReal      (TypedColumn DoubleType     )
    ColumnMaybeReal (TypedColumn MaybeDoubleType)
    ColumnText      (TypedColumn StringType     )
    ColumnMaybeText (TypedColumn MaybeStringType)

    def ptr:
        case self of
            ColumnInt       tc: tc.ptr
            ColumnMaybeInt  tc: tc.ptr
            ColumnReal      tc: tc.ptr
            ColumnMaybeReal tc: tc.ptr
            ColumnText      tc: tc.ptr
            ColumnMaybeText tc: tc.ptr
    def toList:
        case self of
            ColumnInt       tc: tc.toList
            ColumnMaybeInt  tc: tc.toList
            ColumnReal      tc: tc.toList
            ColumnMaybeReal tc: tc.toList
            ColumnText      tc: tc.toList
            ColumnMaybeText tc: tc.toList

    def slice fromIndex length:
        case self of
            ColumnInt       tc: ntc = ColumnInt       (tc.slice fromIndex length)
            ColumnMaybeInt  tc: ntc = ColumnMaybeInt  (tc.slice fromIndex length)
            ColumnReal      tc: ntc = ColumnReal      (tc.slice fromIndex length)
            ColumnMaybeReal tc: ntc = ColumnMaybeReal (tc.slice fromIndex length)
            ColumnText      tc: ntc = ColumnText      (tc.slice fromIndex length)
            ColumnMaybeText tc: ntc = ColumnMaybeText (tc.slice fromIndex length)

    def toText: self.toList.toText

    def toJSON:
        JSON.empty . insert "header" [self.name] . insert "data" (self.slice 0 100 . toList . each (Prepend _ Empty))

    def map fromTypeTag toTypeTag newName f:
        tc = fromTypeTag.useColumn self (_.map toTypeTag newName f)
        toTypeTag.makeColumn tc

    def fromColumnWrapper columnWrapper:
        fw = columnWrapper.field
        case fw.nullable of
            True: case fw.type.name of
                "int64":  ColumnMaybeInt  (TypedColumn MaybeInt64Type  . fromWrapper columnWrapper)
                "double": ColumnMaybeReal (TypedColumn MaybeDoubleType . fromWrapper columnWrapper)
                "utf8":   ColumnMaybeText (TypedColumn MaybeStringType . fromWrapper columnWrapper)
            False: case fw.type.name of
                "int64":  ColumnInt  (TypedColumn Int64Type  . fromWrapper columnWrapper)
                "double": ColumnReal (TypedColumn DoubleType . fromWrapper columnWrapper)
                "utf8":   ColumnText (TypedColumn StringType . fromWrapper columnWrapper)

    def fromList name typeTag list:
        array = Array typeTag . fromList list
        chunks = ChunkedArray.fromChunk array
        field = Field.fromTypeTag name typeTag
        typedCol = TypedColumn typeTag . fromChunks field.ptr chunks.ptr
        typeTag.makeColumn typedCol

    def nullCount: self.ptr.nullCount
    def countMissing: self.ptr.nullCount
    def length: self.ptr.length
    def name: self.ptr.name
    def field:
        Field.fromWrapper $ self.ptr.field

    def toColumn: self
    def rename n:
        f = self.field.rename n
        chunks = self.ptr.data
        wrapper = createColumnWrapper f.ptr chunks
        self.fromColumnWrapper wrapper

    def countValues:  Table.fromWrapper $ self.ptr.countValues

    def min:        Column.fromColumnWrapper $ self.ptr.min
    def max:        Column.fromColumnWrapper $ self.ptr.max
    def mean:       Column.fromColumnWrapper $ self.ptr.mean
    def median:     Column.fromColumnWrapper $ self.ptr.median
    def std:        Column.fromColumnWrapper $ self.ptr.std
    def var:        Column.fromColumnWrapper $ self.ptr.var
    def sum:        Column.fromColumnWrapper $ self.ptr.sum
    def quantile q: Column.fromColumnWrapper $ self.ptr.quantile q
