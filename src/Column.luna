import Dataframes.Array
import Dataframes.Types

import Dataframes.Internal.CWrappers
import Dataframes.Internal.Utils

class Field:
    ptr :: FieldWrapper

    def name:
        self.ptr.name
    def type:
        self.ptr.type
    def nullable:
        self.ptr.nullable
    def toText:
        self.ptr.toText

def createField name typeTag:
    datatypeWrapper = createDataTypeWrapper typeTag.typename
    ptr = createFieldWrapper name datatypeWrapper typeTag.nullable
    Field ptr

class ChunkedArray a:
    typeTag :: a
    ptr :: ChunkedArrayWrapper

    def length:
        self.ptr.length
    def nullCount:
        self.ptr.nullCount
    def type:
        self.ptr.type
    def chunkCount:
        self.ptr.chunkCount
    def chunkAt index:
        wrapper = self.ptr.chunkAt index
        Array self.typeTag wrapper
    def map typeTag f:
        newChunks = 0.upto (self.length - 1) . each index:
            chunk = self.chunkAt index
            chunk . map typeTag f
        createChunkedArrayFromChunks newChunks

    def toText:
        self.toList.toText
    def toJSON:
        self.toList.toJSON
    def toList:
        chunks = 0.upto (self.chunkCount - 1) . each self.chunkAt
        chunks.each .toList . concat

def createChunkedArrayFromChunk arrayChunk:
    wrapper = createChunkedArrayWrapperSingleton arrayChunk.ptr
    ChunkedArray arrayChunk.typeTag wrapper

def createChunkedArrayFromChunks arrayChunks:
    tag = case arrayChunks.head of
        Just h: h.typeTag
        Nothing: throw "Cannot create ChunkedArray without any chunks"
    wrapper = createChunkedArrayWrapperChunks (arrayChunks.each (_.ptr))
    ChunkedArray tag wrapper

class TypedColumn a:
    typeTag :: a
    ptr :: ColumnWrapper

    def nullCount: self.ptr.nullCount
    def length: self.ptr.length
    def field:
        ptr = self.ptr.field
        Field ptr
    def type:
        ptr = self.ptr.type
        DataType ptr
    def data:
        ptr = self.ptr.data
        ChunkedArray self.typeTag ptr
    def name: self.ptr.name
    def slice fromIndex length:
        ptr = self.ptr.slice fromIndex length
        TypedColumn self.typeTag ptr
    def toList:
        self.data.toList

    def map typeTag newName f:
        newChunkedArray = self.data.map typeTag f
        field = createField newName typeTag
        createTypedColumn typeTag field newChunkedArray
        throw "ok!"
        
def createTypedColumn typeTag field chunks:
    ptr = createColumnWrapper field.ptr chunks.ptr
    TypedColumn typeTag ptr

class Column:
    Column
    ColumnInt (TypedColumn Int64Type)
    ColumnMaybeInt (TypedColumn MaybeInt64Type)
    ColumnReal (TypedColumn DoubleType)
    ColumnMaybeReal (TypedColumn MaybeDoubleType)
    ColumnText (TypedColumn StringType)
    ColumnMaybeText (TypedColumn MaybeStringType)

    def ptr:
        case self of
            ColumnInt       tc: tc.ptr
            ColumnMaybeInt  tc: tc.ptr
            ColumnReal      tc: tc.ptr
            ColumnMaybeReal tc: tc.ptr
            ColumnText      tc: tc.ptr
            ColumnMaybeText tc: tc.ptr
    def toList:
        case self of
            ColumnInt       tc: tc.toList
            ColumnMaybeInt  tc: tc.toList
            ColumnReal      tc: tc.toList
            ColumnMaybeReal tc: tc.toList
            ColumnText      tc: tc.toList
            ColumnMaybeText tc: tc.toList
    def toText: self.toList.toText
    def toJSON: self.toList.toJSON

    def map fromTypeTag toTypeTag newName f:
        fromTypeTag.useColumn tc: tc.map toTypeTag newName f

    def fromColumnWrapper typeTag columnWrapper:
        ColumnInt (TypedColumn typeTag columnWrapper)

    def fromList name typeTag list:
        array = listToArray typeTag list
        chunks = createChunkedArrayFromChunk array
        field = createField name typeTag
        ptr = createColumnWrapper field.ptr chunks.ptr
        typedCol = TypedColumn typeTag ptr
        typeTag.makeColumn typedCol

    def nullCount: self.ptr.nullCount
    def length: self.ptr.length
    def name: self.ptr.name