import Std.Foreign.C.Value

import Dataframes.Internal.Utils
import Dataframes.Column

class StringType:
    def append bw value:
        self.withValueAsC value bw.append
    def withValueAsC value f:
        withCString value f
    def typename: "String"
    def ctype: CString
    def fromC isNull val:
        val.toText
    def nullable: False
    def makeColumn typedColumn: ColumnText typedColumn
class MaybeStringType:
    def append bw value:
        case value of
            Just justValue: self.withValueAsC justValue bw.append
            Nothing: bw.appendNull
    def withValueAsC value f:
        withCString value f
    def typename: "String"
    def ctype: CString
    def fromC isNull val:
        case isNull of
            True: Nothing
            False: 
                text = val.toText
                Just text
    def nullable: True
class Int32Type:
    def append bw value:
        self.withValueAsC value bw.append
    def withValueAsC value f:
        f (CInt32.fromInt value)
    def typename: "Int32"
    def ctype: CInt32
    def fromC isNull val:
        val.toInt
    def nullable: False
class MaybeInt32Type:
    def append bw value:
        case value of
            Just justValue: self.withValueAsC justValue bw.append
            Nothing: bw.appendNull
    def withValueAsC value f:
        f (CInt32.fromInt value)
    def typename: "Int32"
    def ctype: CInt32
    def fromC isNull val:
        case isNull of
            True: Nothing
            False: Just val.toInt
    def nullable: True
class Int64Type:
    def append bw value:
        self.withValueAsC value bw.append
    def withValueAsC value f:
        f (CInt64.fromInt value)
    def typename: "Int64"
    def ctype: CInt64
    def fromC isNull val:
        val.toInt
    def nullable: False
    def makeColumn typedColumn: ColumnInt typedColumn
class MaybeInt64Type:
    def append bw value:
        case value of
            Just justValue: self.withValueAsC justValue bw.append
            Nothing: bw.appendNull
    def withValueAsC value f:
        f (CInt64.fromInt value)
    def typename: "Int64"
    def ctype: CInt64
    def fromC isNull val:
        case isNull of
            True: Nothing
            False: Just val.toInt
    def nullable: True

class DoubleType:
    def append bw value:
        self.withValueAsC value bw.append
    def withValueAsC value f:
        f (CDouble.fromReal value)
    def typename: "Double"
    def ctype: CDouble
    def fromC isNull val:
        val.toReal
    def nullable: False
class MaybeDoubleType:
    def append bw value:
        case value of
            Just justValue: self.withValueAsC justValue bw.append
            Nothing: bw.appendNull
    def withValueAsC value f:
        f (CDouble.fromReal value)
    def typename: "Double"
    def ctype: CDouble
    def fromC isNull val:
        case isNull of
            True: Nothing
            False: Just val.toReal
    def nullable: True