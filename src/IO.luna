import Dataframes.Internal.CWrappers
import Dataframes.Internal.Utils
import Dataframes.Column

import Std.Foreign
import Std.Foreign.C.Value

class ColumnNamePolicy:
    TakeFromFirstRow
    Generate
    CustomNames [Text]

class ElementType:
    IntElement
    RealElement
    TextElement
    MaybeIntElement
    MaybeRealElement
    MaybeTextElement

    def toArrowId: case self of
        IntElement: 9
        RealElement: 12
        TextElement: 13
        MaybeIntElement: 9
        MaybeRealElement: 12
        MaybeTextElement: 13

    def nullable: case self of
        IntElement: False
        RealElement: False
        TextElement: False
        MaybeIntElement: True
        MaybeRealElement: True
        MaybeTextElement: True

def listToMap list:
    def insert (k,v) m: m.insert k v
    list.foldLeft Map.empty insert

def withCStringArray texts f:
    bracket (texts.each CString.fromText) (_.each .free) textsCStringList:
        Array CString . with textsCStringList f

class CSVParser:
    CSVParser
    CustomizedParser ColumnNamePolicy [ElementType]

    def namePolicy: case self of
        CSVParser: TakeFromFirstRow
        CustomizedParser n _: n

    def typePolicy: case self of
        CSVParser: []
        CustomizedParser _ m: m

    def useNames names:
        CustomizedParser (CustomNames names) self.typePolicy

    def setTypes columnTypes:
        CustomizedParser self.namePolicy columnTypes

    def customNames: case self.namePolicy of
        CustomNames l: l
        _: []

    def readFile filepath:
        names = self.customNames
        withCStringArray names namesCStringCArray:
            typeInfos = self.typePolicy
            Array CInt8 . with (typeInfos.each v: CInt8.fromInt v.toArrowId) typeIdsC:
                Array CInt8 . with (typeInfos.each v: CInt8.fromInt (if v.nullable then 1 else 0)) nullablesC:
                    namesMode = case self.namePolicy of
                        TakeFromFirstRow: 0
                        Generate: 1
                        CustomNames l: l.length.negate
                    nullptr = Pointer None . null . toCArg
                    ptr = CString.with filepath filepathC:
                        callHandlingError "readTableFromCSVFile" (Pointer None) [filepathC.toCArg, namesCStringCArray.ptr.toCArg, CInt32.fromInt namesMode . toCArg, typeIdsC.ptr.toCArg, nullablesC.ptr.toCArg, CInt32.fromInt typeInfos.length . toCArg]
                    print "foo"
                    wrapper = wrapReleasableResouce TableWrapper ptr
                    TableVal wrapper

    # TODO: deduplicate
    def readText text:
        names = self.customNames
        withCStringArray names namesCStringCArray:
            typeInfos = self.typePolicy
            Array CInt8 . with (typeInfos.each v: CInt8.fromInt v.toArrowId) typeIdsC:
                Array CInt8 . with (typeInfos.each v: CInt8.fromInt (if v.nullable then 1 else 0)) nullablesC:
                    namesMode = case self.namePolicy of
                        TakeFromFirstRow: 0
                        Generate: 1
                        CustomNames l: l.length.negate
                    nullptr = Pointer None . null . toCArg
                    ptr = CString.with text textC:
                        callHandlingError "readTableFromCSVFileContents" (Pointer None) [textC.toCArg, namesCStringCArray.ptr.toCArg, CInt32.fromInt namesMode . toCArg, typeIdsC.ptr.toCArg, nullablesC.ptr.toCArg, CInt32.fromInt typeInfos.length . toCArg]
                    print "foo"
                    wrapper = wrapReleasableResouce TableWrapper ptr
                    TableVal wrapper
