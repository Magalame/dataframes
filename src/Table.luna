import Dataframes.Column
import Dataframes.Schema
import Dataframes.Types
import Dataframes.Internal.CWrappers
import Dataframes.Plot.Matplotlib

import Std.Foreign.C.Value

class SortOrder:
    Ascending
    Descending

    def toCArg:
        i = case self of
            Ascending: 0
            Descending: 1
        CInt8.fromInt i

class NullPosition:
    NullsBefore
    NullsAfter

    def toCArg:
        i = case self of
            NullsBefore: 0
            NullsAfter: 1
        CInt8.fromInt i

# Note: keep in sync with C++ enum with the same name
class AggregateFunction:
    Minimum
    Maximum
    Mean
    Length
    Median
    First
    Last

    def toInt: case self of
        Minimum: 0
        Maximum: 1
        Mean: 2
        Length: 3
        Median: 4
        First: 5
        Last: 6

class Table:
    Table
    TableVal (TableWrapper)

    def ptr:
        case self of
            TableVal ptr: ptr

    def fromWrapper wrapper:
        wrapper' = wrapper
        TableVal wrapper'
    def fromSchemaAndColumns schema columns:
        self.fromWrapper $ createTableWrapper schema.ptr (columns.each .ptr)

    # Constructing `Table` from a list of `Column` values.
    # 
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     None
    #
    # errors:
    # `columns` argument is a empty list: Table.empty is created CONFIRM WITH MWU
    # columns have different rows counts: Table with different amount of rows in different columns. To be fixed by https://github.com/luna/Dataframes/issues/62
    #
    # `columns`: List of columns to construct the `Table`.
    #
    # `return`: `Table` value with columns from the list.
    # ![](data/docs/docs1.png)

    def fromColumns columns:
        fields = columns.each .field
        ptrs = columns.each .ptr
        schema = Schema.fromFields fields
        self.fromWrapper $ createTableWrapper schema.ptr ptrs
    def fromFile path:
        self.fromWrapper $ readTableFromFile path

    def columnCount: self.ptr.columnCount
    def rowCount: self.ptr.rowCount
    def schema:
        wrapper = self.ptr.schema
        SchemaVal wrapper

    # Returns a single `Column` value from `Table` by integer index.
    #
    # Columns are indexed from 0.
    # 
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     column = table.columnAt 1
    # >     None
    #
    # errors:
    # If column index is out of bounds runtime error will appear: `tableColumnAt: wrong index 2 when array length is 2`
    #
    # `index`: Integer column index.
    #
    # `return`: `Column` value from the `Table` for given index.
    # ![](data/docs/docs2.png)

    def columnAt index:
        columnWrapper = self.ptr.columnAt index
        Column.fromColumnWrapper columnWrapper
    
    # Inserts a single `Column` value to `Table` under given index.
    #
    # Columns are indexed from 0. After inserting the column under the `index` and all of the next columns will be shifted by 1. If the index will be increased by 1 number  of columns newly added column will be at the end of the table.
    # 
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     l3 = [21,22,23,24,25]
    # >     col3 = Column.fromList "col3" Int64Type l3 
    # >     newTable = table.addColumn 1 col3
    # >     None
    #
    # errors:
    # For index out of bound runtime error will appear.
    #
    # `index`: Integer index for newly inserted column.
    # `column`: `Column` value to insert.
    #
    # `return`: `Table` value containing previous `table` with newly inserted column.
    # ![](data/docs/docs3.png)

    def addColumn index column:
        self.fromWrapper $ self.ptr.addColumn index column.ptr
    def concat ts:
        cols = ts . each .toList . concat
        self.fromColumns cols
    def + that: Table.concat [self, that]

    # Returns a `Table` value contain column matching given name.
    #
    # If two columns will have the same name the second one will be returned.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     column = table.at "col1"
    # >     None
    #
    # `name`: Column name.
    #
    # `return`: `Table` value from the `table` for given name.
    # ![](data/docs/docs4.png)

    def at name:
        self.columns [name]
    
    # Adds a single `Column` value to `Table` with given name.
    #
    # New column is always added at the end of the table.
    # 
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     l3 = [21,22,23,24,25]
    # >     col3 = Column.fromList "col3" Int64Type l3 
    # >     newTable = table.setAt "foo" col3
    # >     None
    #
    # `name`: Name for newly added column.
    # `column`: `Column` value to add.
    #
    # `return`: `Table` value containing previous `table` with newly added column.
    # ![](data/docs/docs5.png)

    def setAt name column:
        cols = self.toList
        before = cols.takeWhile c: (c.name == name) . not
        after = cols.drop (before.length + 1)
        col = column.rename name
        columns = before + [col] + after
        self.fromColumns columns

    # Returns `Column` value from `Table` located under given name.
    #
    # If more columns than one will have the same name the last one will be returned. 
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     col = table.column "col1"
    # >     None
    #
    # errors:
    # If column `name` will not be in table runtime error will occur.
    #
    # `name`: Name of the column to return.
    #
    # `return`: Single `Column` value selected from `self` table by name.
    # ![](data/docs/docs6.png)

    def column name:
        ix = self.schema.getFieldIndexByName name
        self.columnAt ix    
    
    # Returns a `Table` value with subset of columns from `self` designated by the given name list.
    #
    # If more columns than one will have the same name the last one will be returned. 
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     newTable = table.columns ["col1"] 
    # >     None
    #
    # errors:
    # If choosen column will not be in table runtime error will occur.
    #
    # `names`: List of column names to be returned.
    #
    # `return`: `Table` value with selected columns from `self` table.
    # ![](data/docs/docs6.png)

    def columns names:
        columns = names.each self.column
        self.fromColumns columns
    
    # removeColumn :: Int -> Table
    def removeColumn index:
        self.fromWrapper $ self.ptr.removeColumn index

    # remove :: Text -> Table
    def remove name:
        self.removeColumn $ self.schema.getFieldIndexByName name
    def toList:
        self.ptr.toList.each Column.fromColumnWrapper
    def toText:
        self.toList.toText
    def columnNames:
        self.toList.each .name
    def == that:
        self.ptr.equals that.ptr
    def slice beg count:
        cols = self.toList
        slicedCols = cols.each (_.slice beg count)
        self.fromColumns slicedCols
    
    # Returns the first `count` rows
    #
    # If the number of elements to take will be higher than actual rows number the returned table will be tha same as the `self` table. 
    # For `count` number negative the tabel with no data will be returned.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     take2 = table.take 2
    # >     None
    #
    # `count`: Number of rows to take.
    #
    # `return`: `Table` value with first `count` rows from `self` table.
    # ![](data/docs/docs7.png)

    def take count: self.slice 0 count

    # Drops first `count` rows. 
    #
    # If the number of elements to take will be higher than actual rows number empty table will be returned.
    # For negative `count` number the returned table will be the same as `self` table. TO BE FIXED https://github.com/luna/Dataframes/issues/63 
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     take2 = table.drop 2
    # >     None
    #
    # `count`: Number of rows to drop.
    #
    # `return`: `Table` value without first `count` rows from `self` table.
    # ![](data/docs/docs8.png)

    def drop count:
        leftCount = self.rowCount - count
        self.slice count leftCount
    def toJSON:
        maxCount = 1000 / self.columnCount
        mc = if maxCount < 10 then 10 else maxCount
        rowCount = if self.rowCount < mc then self.rowCount else mc
        cols = self.toList
        columnValueLists = cols.each (_ . slice 0 rowCount . toList)
        JSON.empty . insert "header" self.columnNames . insert "data" columnValueLists
    
    # Returns `Table` value with records for which the given predicate returns `True`.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     filteredTable = table.filter (x: x.at "col2" < 14)
    # >     None
    #
    # `f`: The predicate.
    #
    # `return`: Table with elements satisfying predicate.
    # ![](data/docs/docs9.png)

    def filter f:
        pred = f TableHandle
        self.fromWrapper $ self.ptr.filter pred
    
    # Returns `Table` value with columns for which the given predicate returns `True`.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = ["a", "b", "c", "d", "e"]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" StringType l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     filteredTable = table.filterColumns .isNumeric
    # >     None
    #
    # `f`: The predicate.
    #
    # `return`: Table with columns satisfying predicate.
    # ![](data/docs/docs10.png)

    def filterColumns pred:
        cols = self.toList
        filtered = cols.filter pred
        self.fromColumns filtered
    
    # Returns `Table` value with results of applied functions on each of the columns from `self` table.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     filteredTable = table.eachColumn .max
    # >     None
    #
    # errors:
    # If the predicate can not be applied for one of the columns runtime error will appear.
    #
    # `pred`: {min, max, mean, median, std, var, sum}.
    #
    # `return`: Table with function application results.
    # ![](data/docs/docs11.png)

    def eachColumn pred:
        cols = self.toList
        filtered = cols.each pred
        self.fromColumns filtered

    # Returns `Column` value with results of function `f` application.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     column = table.each (x: x.at "col1" * 10)
    # >     None
    #
    # `f`: Function to apply on `self` table.
    #
    # `return`: `Column` value with function application results.
    # ![](data/docs/docs12.png)

    def each f:
        mapper = f TableHandle
        columnWrapper = self.ptr.eachToColumn "Result" mapper
        Column.fromColumnWrapper columnWrapper
    
    # Creates a table with columns from `self` and an additional column named `name` being a result of application function `f` on the `self` table.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     newTable = table.eachTo "col3" (x: x.at "col1" * 10)
    # >     None
    #
    # `name`: Name of newly created column in result table.
    # `f`: Function to apply on `self` table.
    #
    # `return`: `self` with additional column `name` containing values returned by f for each row.
    # ![](data/docs/docs13.png)

    def eachTo name f:
        r = self.each f
        self.setAt name r

    # sortBy :: [(Column, SortOrder, NullPosition)]
    def sortByColumn sortBy:
        self.fromWrapper $ self.ptr.sort (sortBy.each (col, b, c): (col.ptr, b, c))
    # sortBy is list of triples: [(column name :: Text, SortOrder, NullPosition)]
    def sort sortBy:
        sortByColumns = sortBy.each (colName, order, pos): (self.column colName, order, pos)
        self.sortByColumn sortByColumns

    # Creates `Table` value from `self` table with removed rows with missing values.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [Just 1, Nothing, Just 3, Just 4, Just 5]
    # >     l2 = [Nothing, Just 12, Just 13, Just 14, Just 15]
    # >     col1 = Column.fromList "col1" MaybeInt64Type l1
    # >     col2 = Column.fromList "col2" MaybeInt64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     newTable = table.dropNa
    # >     None
    #
    # `return`: `Table` value without rows containing NA records.
    # ![](data/docs/docs14.png)

    def dropNa:
        self.fromWrapper $ self.ptr.dropNa

    # Creates `Table` value from `self` table with removed rows where missing values occurs for given column.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [Just 1, Nothing, Just 3, Just 4, Just 5]
    # >     l2 = [Nothing, Just 12, Just 13, Just 14, Just 15]
    # >     col1 = Column.fromList "col1" MaybeInt64Type l1
    # >     col2 = Column.fromList "col2" MaybeInt64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     newTable = table.dropNaAt "col2"
    # >     None
    #
    # `name`: Column name for which we check null values.
    #
    # `return`: `Table` value without rows containing null records in given column.
    # ![](data/docs/docs15.png)

    def dropNaAt columnName:
        self.fromWrapper $ self.ptr.dropNaByName columnName

    # Creates `Table` value from `self` table with null values filled by `valueToFillWith`.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [Just 1, Nothing, Just 3, Just 4, Just 5]
    # >     l2 = [Nothing, Just 12, Just 13, Just 14, Just 15]
    # >     col1 = Column.fromList "col1" MaybeInt64Type l1
    # >     col2 = Column.fromList "col2" MaybeInt64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     newTable = table.fillNa 53
    # >     None 
    #
    # `valueToFillWith`: Value to use to fill nulls (e.g. 0).
    #
    # `return`: `Table` with nulls filled by `valueToFillWith`.

    def fillNa valueToFillWith:
        self.fromWrapper $ self.ptr.fillNa valueToFillWith

    # Creates `Table` value from `self` table with null values filled with `valueToFillWith` in column `columnName`
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [Just 1, Nothing, Just 3, Just 4, Just 5]
    # >     l2 = [Nothing, Just 12, Just 13, Just 14, Just 15]
    # >     col1 = Column.fromList "col1" MaybeInt64Type l1
    # >     col2 = Column.fromList "col2" MaybeInt64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     newTable = table.fillNaAt "col1" 53
    # >     None
    #
    # errors:
    # 
    #
    # `columnName`: Name of the column to fill nulls in.
    # `valueToFillWith`: Value to use to fill nulls (e.g. 0).
    #
    # `return`: `Table` with nulls in column `columnName` filled with `valueToFillWith `.

    def fillNaAt columnName valueToFillWith:
        self.fromWrapper $ self.ptr.fillNaAt columnName valueToFillWith

    def interpolate:
        self.fromWrapper $ self.ptr.interpolate
    def toColumn:
        case self.toList of
            [c]: c
            t: throw $ "Table.toColumn: table must have exactly 1 column, but has " + t.length.toText

    # Generates `Table` with number and percentage of null values for each column.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [Just 1, Nothing, Just 3, Just 4, Just 5]
    # >     l2 = [Nothing, Just 12, Just 13, Just 14, Just 15]
    # >     col1 = Column.fromList "col1" MaybeInt64Type l1
    # >     col2 = Column.fromList "col2" MaybeInt64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     newTable = table.describeNa
    # >     None
    #
    # `return`: `Table` value with statistics of null values for each column.

    def describeNa:
        cols = self.toList
        nrows = self.rowCount
        names = cols . each .name
        nullCounts = cols . each .nullCount
        nullRatios = nullCounts . each (_.toReal / nrows.toReal)
        namesCol      = Column.fromList "colname" StringType names
        nullCountsCol = Column.fromList "count"   Int64Type  nullCounts
        nullRatiosCol = Column.fromList "ratio"   DoubleType nullRatios
        self.fromColumns [namesCol, nullCountsCol, nullRatiosCol]

    def shortRep:
        "Table<" + self.columnCount.toText + "×" + self.rowCount.toText + ">"

    # Computes pairwise Pearson's correlation of columns, excluding null values.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" StringType l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     correlations = table.corr
    # >     None
    #
    # `return`: `Table` value with pairwise correlations calculated for `self` table.

    def corr:
        self.fromWrapper $ self.ptr.corr

    # Computes pairwise Pearson's correlations with given column, excluding null values.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" StringType l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     correlations = table.corrWith "col2"
    # >     None
    #
    # errors: 
    # If column to calculate statistics with will not be numerical runtime error will be returned.
    #
    # `columnName`: Column for which the correlations are calculated.
    #
    # `return`: `Table` value including correlations with `columnName` column calculated for `self` table.

    def corrWith columnName:
        column = self.at columnName . toColumn
        corrCol = Column.fromColumnWrapper $ self.ptr.corrWith column.ptr
        colNames = self.toList . each .name
        corrList = corrCol.toList
        l1 = colNames . zip corrList
        sorted = l1.sortBy .second
        names = sorted.each .first
        vals  = sorted.each .second
        col1 = Column.fromList "column" StringType names
        col2 = Column.fromList ("CORR_WITH_" + columnName) DoubleType vals
        Table.fromColumns [col1, col2]

    # Generates descriptive statistics that summarize the central tendency, dispersion and shape of the values in given column distribution. 
    #
    # Analyzes just the numeric values, excluding NA/null values. Returns statistics: mean, standard deviation, minimum, 1st quantile, median, 3rd quantile, maximum.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" StringType l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     correlations = table.describeColumn "col2"
    # >     None
    #
    # errors: 
    # If column does not exist in table runtime error will be returned.
    #
    # `columnName`: String value, name of the column to calculate the statistics for.
    #
    # `return`: `Table` value with the statistics for given column.

    def describeColumn columnName:
        col = self.at columnName . toColumn
        min = col.min
        max = col.max
        mean = col.mean
        std = col.std
        quart1 = col.quantile 0.25
        median = col.median
        quart3 = col.quantile 0.75
        Table.fromColumns [mean, std, min, quart1, median, quart3, max]

    def countValues columnName:
        self.at columnName . toColumn . countValues

    # aggregateBy :: Text -> [(Text, [AggregateFunction])] -> Table
    def aggregateBy keyColumnName aggregations:
        keyColumnWrapper = self.column keyColumnName . ptr
        aggregationWithWrappers = aggregations.each (colname, aggrs): (self.column colname . ptr, aggrs.each .toInt)
        self.fromWrapper $ self.ptr.aggregateBy keyColumnWrapper aggregationWithWrappers

    # Describes returns informations about whole table: standard deviation, minium, maximum, mean, median qunatile 0.25 and 0.75 for each column.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" StringType l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     correlations = table.describe
    # >     None
    #
    # `return`: `Table` value with the statistics for `self` table.

    def describe:
        numerics = self.filterColumns .isNumeric
        names = numerics.columnNames 

        std = names.each (name: self.column name . std )
        stdVal = std.map .toList 
        stdFlatList = stdVal.concat

        min = names.each (name: self.column name . min )
        minVal = min.map .toList 
        minFlatList = minVal.concat

        max = names.each (name: self.column name . max )
        maxVal = max.map .toList 
        maxFlatList = maxVal.concat

        mean = names.each (name: self.column name . mean )
        meanVal = mean.map .toList 
        meanFlatList = meanVal.concat

        quart1 = names.each (name: self.column name . quantile 0.25 )
        quart1Val = quart1.map .toList 
        quart1FlatList = quart1Val.concat

        median = names.each (name: self.column name . median )
        medianVal = median.map .toList 
        medianFlatList = medianVal.concat

        quart3 = names.each (name: self.column name . quantile 0.75 )
        quart3Val = quart3.map .toList 
        quart3FlatList = quart3Val.concat

        col1 = Column.fromList "column" StringType names 
        col2 = Column.fromList "Mean" DoubleType meanFlatList 
        col3 = Column.fromList "Std dev" DoubleType stdFlatList 
        col4 = Column.fromList "Min" DoubleType minFlatList 
        col5 = Column.fromList "Quantile 0.25" DoubleType quart1FlatList 
        col6 = Column.fromList "Median" DoubleType medianFlatList 
        col7 = Column.fromList "Quantile 0.75" DoubleType quart3FlatList 
        col8 = Column.fromList "Max" DoubleType maxFlatList 
        Table.fromColumns [col1, col2, col3, col4, col5, col6, col7, col8]

    def chart: ChartBuilder self

class ChartBuilder:
    table :: Table

    # Plots y versus x. Default style for plot is marker.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     plot1 = table.chart.plot "col1" "col2"
    # >     None
    #
    # `columnName1`: X column name.
    # `columnName2`: Y column name.
    #
    # `return`: [] SCREESHOT

    def plot columnName1 columnName2:
        c1 = self.table.at columnName1 . toColumn
        c2 = self.table.at columnName2 . toColumn
        Plot c1 c2 "o" Nothing

    def plotDate columnName1 columnName2: 
        c1 = self.table.at columnName1 . toColumn
        c2 = self.table.at columnName2 . toColumn
        PlotDate c1 c2

    def scatter columnName1 columnName2: 
        c1 = self.table.at columnName1 . toColumn
        c2 = self.table.at columnName2 . toColumn
        Scatter c1 c2

    # Plots a histogram.
    #
    # Compute and plot histogram of x.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     plot1 = table.chart.histogram "col1"
    # >     None
    #
    # `columnName`: X column name.
    #
    # `return`: [] SCREESHOT

    def histogram columnName:
        c = self.table.at columnName . toColumn
        Histogram c 10 Map.empty

    # Fits and plots a bivariate kernel density estimate.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     plot1 = table.chart.kde2 "col1" "col2"
    # >     None
    #
    # `columnName1`: First input data.
    # `columnName2`: Second input data.
    #
    # `return`: [] SCREESHOT

    def kde2 columnName1 columnName2:
        c1 = self.table.at columnName1 . toColumn
        c2 = self.table.at columnName2 . toColumn
        KDE2 c1 c2 "Blues_r"

    # Fits and plots a univariate kernel density estimate.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     plot1 = table.chart.kde "col1"
    # >     None
    #
    # `columnName`: Input column name.
    #
    # `return`: [] SCREESHOT

    def kde columnName:
        c = self.table.at columnName . dropNa . toColumn
        KDE c Nothing

    # Plots rectangular data as a color-encoded matrix.
    #
    # > import Dataframes.Column 
    # > import Dataframes.Types
    # > import Dataframes.Table 
    # >
    # > def main:
    # >     l1 = [1,2,3,4,5]
    # >     l2 = [11,12,13,14,15]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     col2 = Column.fromList "col2" Int64Type l2
    # >     table = Table.fromColumns [col1 , col2]
    # >     correlations = table.corr 
    # >     heatmapPlot = correlations.chart.heatmap 
    # >     None
    #
    # `return`: [] SCREESHOT

    def heatmap:
        Heatmap self.table "RdBu_r" Nothing

class Heatmap:
    data :: Table
    colorMap :: Text
    annotations :: Maybe Text

    def render:
        Matplotlib.heatmap self.data.ptr.ptr self.colorMap self.annotations

    def toChart: Chart self.render

    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setColorMap s: Heatmap self.data s self.annotations
    def setAnnotations s: Heatmap self.data self.colorMap (Just s)
