import Dataframes.Column
import Dataframes.Schema
import Dataframes.Internal.CWrappers
import Dataframes.Plot.Matplotlib

class Table:
    Table
    TableVal (TableWrapper)

    def ptr:
        case self of
            TableVal ptr: ptr

    def fromWrapper wrapper:
        wrapper' = wrapper
        TableVal wrapper'
    def fromSchemaAndColumns schema columns:
        self.fromWrapper $ createTableWrapper schema.ptr (columns.each .ptr)
    def fromColumns columns:
        schema = Schema.fromFields (columns.each .field)
        self.fromWrapper $ createTableWrapper schema.ptr (columns.each .ptr)
    def fromFile path:
        self.fromWrapper $ readTableFromFile path

    def columnCount: self.ptr.columnCount
    def rowCount: self.ptr.rowCount
    def schema:
        wrapper = self.ptr.schema
        SchemaVal wrapper
    def columnAt index:
        columnWrapper = self.ptr.columnAt index
        Column.fromColumnWrapper columnWrapper
    def addColumn index column:
        self.fromWrapper $ self.ptr.addColumn index column.ptr
    def at name:
        self.columns [name]
    def setAt name column:
        cols = self.toList
        before = cols.takeWhile c: (c.name == name) . not
        after = cols.drop (before.length + 1)
        col = column.rename name
        columns = before + [col] + after
        self.fromColumns columns
    def columns names:
        schema = self.schema
        ixes = names.each schema.getFieldIndexByName
        columns = ixes.each self.columnAt
        self.fromColumns columns
    def removeColumn index:
        self.fromWrapper $ self.ptr.removeColumn index
    def toList:
        self.ptr.toList.each Column.fromColumnWrapper
    def toText:
        self.toList.toText
    def columnNames:
        self.toList.each .name
    def == that:
        self.ptr.equals that.ptr
    def toJSON:
        rowCount = 10
        columnValueLists = self.toList.each (_ . slice 0 rowCount . toList)
        rowIndices = 0.upto (rowCount - 1)
        rows = rowIndices.each rowIndex:
            columnValueLists.each (_.getAt rowIndex)
        JSON.empty . insert "header" self.columnNames . insert "data" rows
    def filter f:
        pred = f TableHandle
        self.fromWrapper $ self.ptr.filter pred
    def each f:
        mapper = f TableHandle
        columnWrapper = self.ptr.eachToColumn "Result" mapper
        Column.fromColumnWrapper columnWrapper
    def eachTo name f:
        r = self.each f
        self.setAt name r
    def dropNa:
        self.fromWrapper $ self.ptr.dropNa
    def dropNaAt columnName:
        self.fromWrapper $ self.ptr.dropNaByName columnName
    def fillNa valueToFillWith:
        self.fromWrapper $ self.ptr.fillNa valueToFillWith
    def fillNaAt columnName valueToFillWith:
        self.fromWrapper $ self.ptr.fillNaAt columnName valueToFillWith

    def describeNa:
        cols = self.toList
        nrows = self.rowCount
        names = cols . each .name
        nullCounts = cols . each .nullCount
        nullRatios = nullCounts . each (_.toReal / nrows.toReal)
        namesCol      = Column.fromList "colname" StringType names
        nullCountsCol = Column.fromList "count"   Int64Type  nullCounts
        nullRatiosCol = Column.fromList "ratio"   DoubleType nullRatios
        self.fromColumns [namesCol, nullCountsCol, nullRatiosCol]

    def shortRep:
        "Table<" + self.columnCount.toText + "Ã—" + self.rowCount.toText + ">"

    def chart: ChartBuilder self

class ChartBuilder:
    table :: Table

    def plot cname1 cname2:
        c1 = self.table.at cname1 . columnAt 0
        c2 = self.table.at cname2 . columnAt 0
        Plot c1 c2 "o"

    def histogram cname:
        c = self.table.at cname . columnAt 0
        Histogram c 10 Map.empty

    def kde2 cname1 cname2:
        c1 = self.table.at cname1 . columnAt 0
        c2 = self.table.at cname2 . columnAt 0
        KDE2 c1 c2 "Blues_r"

    def kde cname:
        c = self.table.at cname . columnAt 0
        KDE c Nothing
