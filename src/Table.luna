import Dataframes.Column
import Dataframes.Schema
import Dataframes.Internal.CWrappers

class Table:
    Table
    TableVal (TableWrapper)

    def ptr: 
        case self of 
            TableVal ptr: ptr

    def fromWrapper wrapper:
        wrapper' = wrapper
        TableVal wrapper'
    def fromSchemaAndColumns schema columns:
        self.fromWrapper $ createTableWrapper schema.ptr (columns.each .ptr)
    def fromColumns columns:
        schema = Schema.fromFields (columns.each .field)
        self.fromWrapper $ createTableWrapper schema.ptr (columns.each .ptr)
    def fromFile path:
        self.fromWrapper $ readTableFromFile path

    def columnCount: self.ptr.columnCount
    def rowCount: self.ptr.rowCount
    def schema:
        wrapper = self.ptr.schema
        Schema wrapper
    def columnAt index: 
        columnWrapper = self.ptr.columnAt index
        Column.fromColumnWrapper columnWrapper
    def addColumn index column:
        self.fromWrapper $ self.ptr.addColumn index column.ptr
    def removeColumn index:
        self.fromWrapper $ self.ptr.removeColumn index
    def toList:
        self.ptr.toList.each Column.fromColumnWrapper
    def toText:
        self.toList.toText
    def columnNames:
        self.toList.each .name
    def == that:
        self.ptr.equals that.ptr
    def toJSON:
        columnValueLists = self.toList.each .toList
        rowIndices = 0.upto (self.rowCount - 1)
        rows = rowIndices.each rowIndex:
            columnValueLists.each (_.getAt rowIndex)
        JSON.empty . insert "header" self.columnNames . insert "data" rows
    def filter f:
        pred = f TableHandle
        self.fromWrapper $ self.ptr.filter pred
    def each name f:
        mapper = f TableHandle
        columnWrapper = self.ptr.eachToColumn name mapper
        Column.fromColumnWrapper columnWrapper
    def dropNa:
        self.fromWrapper $ self.ptr.dropNa
    def dropNaAt columnName:
        self.fromWrapper $ self.ptr.dropNaByName columnName
    def fillNa valueToFillWith:
        self.fromWrapper $ self.ptr.fillNa valueToFillWith
    def fillNaAt columnName valueToFillWith:
        self.fromWrapper $ self.ptr.fillNaAt columnName valueToFillWith
    def corr:
        self.fromWrapper $ self.ptr.corr


        
